<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Urban Ease - Create Community</title>

   <style>:root {
    --primary-color: #2c4b7c;
    --secondary-color: #6a93cb;
    --light-blue: #a1c4fd;
    --white: #ffffff;
    --light-gray: #f5f7fa;
    --text-dark: #333;
    --text-light: #666;
    --active-green: #4caf50;
    --pending-orange: #ff7043;
    --checked-gray: #9e9e9e;
    --card-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    --border-radius: 12px;
    --glass-bg: rgba(255, 255, 255, 0.95);
    --backdrop-blur: blur(10px);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
}

body {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: var(--text-dark);
    font-size: 13px;
    position: relative;
    min-height: 100vh;
}

/* Desktop/Laptop: Full height layout */
@media (min-width: 1024px) {
    body {
        height: 100vh;
        overflow: hidden;
    }
    
    .main-container {
        height: 100vh;
    }
    
    .container {
        max-height: calc(100vh - 120px);
    }
    
    .column-content {
        overflow-y: auto;
    }
}

/* Tablet and smaller: Scrollable layout */
@media (max-width: 1023px) {
    body {
        overflow-y: auto;
        height: auto;
    }
    
    .main-container {
        height: auto;
        min-height: 100vh;
    }
    
    .container {
        max-height: none;
    }
    
    .column-content {
        overflow-y: visible;
        max-height: none;
    }
}

body::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background:
        radial-gradient(circle at 20% 50%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 40% 80%, rgba(120, 119, 198, 0.2) 0%, transparent 50%);
    pointer-events: none;
}

.main-container {
    display: flex;
    flex-direction: column;
    position: relative;
    z-index: 1;
}

.main-header {
    text-align: center;
    padding: 1.5rem 0;
    color: var(--white);
    flex-shrink: 0;
}

.main-header h1 {
    font-size: 2rem;
    font-weight: 700;
    text-shadow: 0 2px 20px rgba(0, 0, 0, 0.3);
    margin-bottom: 0.5rem;
    background: linear-gradient(135deg, #fff 0%, #f0f8ff 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.main-header p {
    font-size: 1rem;
    opacity: 0.9;
    font-weight: 300;
}

.container {
    flex: 1;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 1.5rem;
    padding: 0 2rem 2rem 2rem;
    min-height: 0;
}

.column {
    background: var(--glass-bg);
    backdrop-filter: var(--backdrop-blur);
    border-radius: var(--border-radius);
    box-shadow: var(--card-shadow);
    border: 1px solid rgba(255, 255, 255, 0.2);
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.column-header {
    text-align: center;
    padding: 1rem;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
    flex-shrink: 0;
}

.column-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--primary-color);
    margin-bottom: 0.25rem;
}

.column-subtitle {
    font-size: 0.75rem;
    color: var(--text-light);
}

.column-content {
    flex: 1;
    padding: 1rem;
    scrollbar-width: thin;
    scrollbar-color: rgba(0, 0, 0, 0.2) transparent;
}

.column-content::-webkit-scrollbar {
    width: 4px;
}

.column-content::-webkit-scrollbar-track {
    background: transparent;
}

.column-content::-webkit-scrollbar-thumb {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 2px;
}

.form-section {
    margin-bottom: 0.5rem;
}

.section-title {
    color: var(--primary-color);
    margin-bottom: 0.75rem;
    font-size: 0.9rem;
    font-weight: 600;
    position: relative;
    padding-bottom: 0.5rem;
}

.section-title::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 20px;
    height: 2px;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    border-radius: 2px;
}

/* Form Grid Layout */
.form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
}

.form-group {
    margin-bottom: 1rem;
}

label {
    display: block;
    margin-bottom: 0.25rem;
    font-weight: 500;
    color: var(--text-dark);
    font-size: 0.75rem;
}

.required {
    color: #e74c3c;
}

input,
select,
textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #e1e8ed;
    border-radius: 6px;
    font-size: 0.75rem;
    transition: all 0.3s ease;
    background-color: rgba(255, 255, 255, 0.9);
}

input:focus,
select:focus,
textarea:focus {
    outline: none;
    border-color: var(--secondary-color);
    background-color: var(--white);
    box-shadow: 0 0 0 2px rgba(106, 147, 203, 0.1);
}

textarea {
    resize: vertical;
    min-height: 60px;
}

/* Photo Upload Styles */
.photo-upload-area {
    border: 2px dashed #e1e8ed;
    border-radius: 8px;
    padding: 1rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.5);
    margin-bottom: 1rem;
}

.photo-upload-area:hover {
    border-color: var(--secondary-color);
    background: rgba(106, 147, 203, 0.1);
}

.photo-upload-area.dragover {
    border-color: var(--active-green);
    background: rgba(76, 175, 80, 0.1);
}

.upload-icon {
    font-size: 2rem;
    color: var(--text-light);
    margin-bottom: 0.5rem;
}

.upload-text {
    font-size: 0.75rem;
    color: var(--text-light);
    margin-bottom: 0.5rem;
}

.photo-preview-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
    gap: 0.5rem;
    margin-top: 1rem;
}

.photo-preview {
    position: relative;
    aspect-ratio: 1;
    border-radius: 6px;
    overflow: hidden;
    background: #f5f5f5;
}

.photo-preview img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.photo-remove {
    position: absolute;
    top: -5px;
    right: -5px;
    background: #e74c3c;
    color: white;
    border: none;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Common Spaces Styles */
.spaces-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.space-option {
    border: 1px solid #e1e8ed;
    border-radius: 6px;
    padding: 0.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.7);
    text-align: center;
    font-size: 0.7rem;
}

.space-option:hover {
    border-color: var(--secondary-color);
    transform: translateY(-1px);
}

.space-option.selected {
    border-color: var(--active-green);
    background: rgba(76, 175, 80, 0.1);
}

.space-option input[type="checkbox"] {
    display: none;
}

.space-name {
    font-weight: 500;
    color: var(--text-dark);
}

/* Custom Spaces */
.custom-space-section {
    margin-top: 1rem;
    padding: 0.75rem;
    background: rgba(106, 147, 203, 0.05);
    border: 1px dashed var(--secondary-color);
    border-radius: 6px;
}

.custom-spaces-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
    margin-bottom: 0.5rem;
    min-height: 20px;
}

.custom-space-tag {
    background: var(--active-green);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.65rem;
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

.custom-space-tag .remove-btn {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    font-size: 10px;
    opacity: 0.8;
}

.add-custom-space {
    display: flex;
    gap: 0.5rem;
}

.add-custom-space input {
    flex: 1;
    font-size: 0.65rem;
    padding: 0.25rem 0.5rem;
}

.add-space-btn {
    background: var(--secondary-color);
    color: white;
    border: none;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.65rem;
    white-space: nowrap;
}

/* Subscription Plans */
.plans-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem;
}

.plan-option {
    border: 1px solid #e1e8ed;
    border-radius: 8px;
    padding: 0.75rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 0.75rem;
    background: rgba(255, 255, 255, 0.7);
}

.plan-option:hover {
    border-color: var(--secondary-color);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.plan-option.selected {
    border-color: var(--primary-color);
    background: rgba(44, 75, 124, 0.1);
    box-shadow: 0 6px 15px rgba(44, 75, 124, 0.2);
}

.plan-option input[type="radio"] {
    display: none;
}

.plan-title {
    font-weight: 600;
    color: var(--primary-color);
    margin-bottom: 0.25rem;
    font-size: 0.85rem;
}

.plan-price {
    font-size: 1rem;
    font-weight: 700;
    color: var(--active-green);
    margin-bottom: 0.5rem;
}

.plan-features {
    font-size: 0.65rem;
    color: var(--text-light);
    line-height: 1.3;
    text-align: left;
}

.plan-features ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.plan-features li {
    padding: 0.1rem 0;
    position: relative;
    padding-left: 12px;
}

.plan-features li::before {
    content: '✓';
    color: var(--active-green);
    font-weight: bold;
    position: absolute;
    left: 0;
    font-size: 0.6rem;
}

/* Payment Summary */
.payment-summary {
    background: rgba(245, 247, 250, 0.9);
    border-radius: 8px;
    padding: 0.75rem;
    margin: 1rem 0;
}

.payment-summary h4 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
    font-size: 0.85rem;
    text-align: center;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    margin: 0.25rem 0;
    font-size: 0.7rem;
    padding: 0.25rem 0;
}

.summary-row.total {
    border-top: 1px solid #ddd;
    margin-top: 0.5rem;
    padding-top: 0.5rem;
    font-weight: 600;
    font-size: 0.8rem;
    color: var(--primary-color);
}

.btn {
    width: 100%;
    padding: 0.75rem;
    border: none;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 0.5rem;
}

.btn-primary {
    background: linear-gradient(135deg, var(--secondary-color) 0%, var(--primary-color) 100%);
    color: var(--white);
    box-shadow: 0 4px 15px rgba(44, 75, 124, 0.3);
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(44, 75, 124, 0.4);
}

.btn-secondary {
    background: rgba(248, 249, 250, 0.9);
    color: var(--text-dark);
    border: 1px solid #dee2e6;
}

.btn-secondary:hover {
    background: #e9ecef;
    transform: translateY(-1px);
}

.success-message,
.error-message {
    padding: 0.5rem;
    border-radius: 4px;
    margin-bottom: 0.75rem;
    font-size: 0.7rem;
    display: none;
}

.success-message {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.error-message {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

.info-note {
    background: linear-gradient(135deg, rgba(76, 175, 80, 0.1) 0%, rgba(76, 175, 80, 0.05) 100%);
    border: 1px solid rgba(76, 175, 80, 0.3);
    color: var(--active-green);
    padding: 0.5rem;
    border-radius: 6px;
    margin-bottom: 1rem;
    font-size: 0.65rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 500;
}

.info-note::before {
    content: "ℹ";
    font-weight: bold;
    font-size: 12px;
    background: var(--active-green);
    color: white;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(5px);
}

.modal-content {
    background-color: #fff;
    margin: 10% auto;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    max-width: 400px;
    text-align: center;
}

/* Responsive Design */

/* Large Desktop */
@media (min-width: 1440px) {
    .container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 3rem 3rem 3rem;
    }
    
    .main-header h1 {
        font-size: 2.5rem;
    }
}

/* Desktop/Laptop */
@media (min-width: 1024px) and (max-width: 1439px) {
    .container {
        gap: 1.2rem;
        padding: 0 1.5rem 2rem 1.5rem;
    }
    
    .main-header h1 {
        font-size: 1.8rem;
    }
}

/* Large Tablet */
@media (min-width: 768px) and (max-width: 1023px) {
    .container {
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        padding: 0 1.5rem 2rem 1.5rem;
    }

    .column:last-child {
        grid-column: 1 / -1;
    }

    .main-header h1 {
        font-size: 1.6rem;
    }

    .spaces-grid {
        grid-template-columns: 1fr;
    }
    
    .plans-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .plan-option {
        margin-bottom: 0;
    }
}

/* Small Tablet / Large Mobile */
@media (min-width: 481px) and (max-width: 767px) {
    .container {
        grid-template-columns: 1fr;
        grid-template-rows: auto auto auto;
        gap: 1rem;
        padding: 0 1rem 1rem 1rem;
    }

    .main-header {
        padding: 1rem 0;
    }

    .main-header h1 {
        font-size: 1.4rem;
    }

    .main-header p {
        font-size: 0.9rem;
    }

    .column {
        min-height: auto;
        width: 100%;
    }

    .form-grid {
        grid-template-columns: 1fr;
        gap: 0.5rem;
    }
    
    .spaces-grid {
        grid-template-columns: 1fr;
    }
    
    .plans-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .photo-preview-grid {
        grid-template-columns: repeat(auto-fill, minmax(70px, 1fr));
    }
}

/* Mobile - 3 ROWS LAYOUT */
@media (max-width: 480px) {
    .container {
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: auto auto auto;
        gap: 0.75rem;
        padding: 0 0.5rem 1rem 0.5rem;
    }

    .main-header h1 {
        font-size: 1.2rem;
    }

    .main-header p {
        font-size: 0.8rem;
    }

    .column {
        min-height: auto;
        width: 100%;
    }

    .column-header {
        padding: 0.75rem;
    }

    .column-content {
        padding: 0.75rem;
    }

    .photo-preview-grid {
        grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
    }

    .form-grid {
        grid-template-columns: 1fr;
        gap: 0.5rem;
    }
    
    .spaces-grid {
        grid-template-columns: 1fr;
    }
    
    .plans-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .modal-content {
        margin: 20% auto;
        padding: 1.5rem;
        max-width: 90%;
    }
    
    .btn {
        padding: 0.6rem;
        font-size: 0.7rem;
    }
}

/* Ultra-wide screens */
@media (min-width: 1600px) {
    .container {
        max-width: 1600px;
        gap: 2rem;
        padding: 0 4rem 3rem 4rem;
    }
    
    .main-header h1 {
        font-size: 2.8rem;
    }
    
    .column-content {
        padding: 1.5rem;
    }
}</style>
</head>

<body>
    <div class="main-container">
        <div class="main-header">
            <h1>Create New Community</h1>
            <p>Set up your community management system in just a few steps</p>
        </div>

        <div class="container">
            <!-- Column 1: Basic Information & Photos -->
            <div class="column">
                <div class="column-header">
                    <div class="column-title">📝 Community Details</div>
                    <div class="column-subtitle">Basic info & photos</div>
                </div>

                <div class="column-content">
                    <div id="successMessage" class="success-message"></div>
                    <div id="errorMessage" class="error-message"></div>


                    <form id="createCommunityForm">
                        <div class="form-section">
                            <div class="form-grid">
                                <div class="form-group">
                                    <label for="communityName">Community Name <span class="required">*</span></label>
                                    <input type="text" id="communityName" name="name" required
                                        placeholder="Enter community name">
                                </div>

                                <div class="form-group">
                                    <label for="communityLocation">Location <span class="required">*</span></label>
                                    <input type="text" id="communityLocation" name="location" required
                                        placeholder="Enter community location">
                                </div>

                                <div class="form-group">
                                    <label for="communityEmail">Community Email <span class="required">*</span></label>
                                    <input type="email" id="communityEmail" name="email" required
                                        placeholder="community@example.com">
                                </div>

                                <div class="form-group">
                                    <label for="totalMembers">Total Members</label>
                                    <input type="number" id="totalMembers" name="totalMembers" min="0"
                                        placeholder="Number of members" value="0">
                                </div>
                            </div>
                        </div>

                        <div class="form-section">
                            <h3 class="section-title">Community Photos</h3>

                            <div class="photo-upload-area" onclick="document.getElementById('photoInput').click()">
                                <div class="upload-icon">📷</div>
                                <div class="upload-text">Click to upload photos</div>
                                <div style="font-size: 0.65rem; color: #999;">Drag & drop or click to browse</div>
                            </div>

                            <input type="file" id="photoInput" multiple accept="image/*" style="display: none;">
                            <div id="photoPreviewGrid" class="photo-preview-grid"></div>
                        </div>

                        <div class="form-section">
                            <h3 class="section-title">Description</h3>

                            <div class="form-group">
                                <textarea id="communityDescription" name="description"
                                    placeholder="Brief description of the community..."></textarea>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Column 2: Common Spaces -->
            <div class="column">
                <div class="column-header">
                    <div class="column-title">🏢 Common Spaces</div>
                    <div class="column-subtitle">Select available facilities</div>
                </div>

                <div class="column-content">
                    <div class="form-section">
                        <div class="spaces-grid">
                            <div class="space-option" onclick="toggleSpace(this, 'Clubhouse')">
                                <input type="checkbox" name="commonSpaces" value="Clubhouse">
                                <div class="space-name">🏢 Clubhouse</div>
                            </div>

                            <div class="space-option" onclick="toggleSpace(this, 'Banquet Hall')">
                                <input type="checkbox" name="commonSpaces" value="Banquet Hall">
                                <div class="space-name">🏛️ Banquet Hall</div>
                            </div>

                            <div class="space-option" onclick="toggleSpace(this, 'Community Hall')">
                                <input type="checkbox" name="commonSpaces" value="Community Hall">
                                <div class="space-name">🏤 Community Hall</div>
                            </div>

                            <div class="space-option" onclick="toggleSpace(this, 'Swimming Pool')">
                                <input type="checkbox" name="commonSpaces" value="Swimming Pool">
                                <div class="space-name">🏊 Swimming Pool</div>
                            </div>

                            <div class="space-option" onclick="toggleSpace(this, 'Tennis Court')">
                                <input type="checkbox" name="commonSpaces" value="Tennis Court">
                                <div class="space-name">🎾 Tennis Court</div>
                            </div>

                            <div class="space-option" onclick="toggleSpace(this, 'Badminton Court')">
                                <input type="checkbox" name="commonSpaces" value="Badminton Court">
                                <div class="space-name">🏸 Badminton Court</div>
                            </div>

                            <div class="space-option" onclick="toggleSpace(this, 'Basketball Court')">
                                <input type="checkbox" name="commonSpaces" value="Basketball Court">
                                <div class="space-name">🏀 Basketball Court</div>
                            </div>

                            <div class="space-option" onclick="toggleSpace(this, 'Amphitheatre')">
                                <input type="checkbox" name="commonSpaces" value="Amphitheatre">
                                <div class="space-name">🎭 Amphitheatre</div>
                            </div>

                            <div class="space-option" onclick="toggleSpace(this, 'Guest Room')">
                                <input type="checkbox" name="commonSpaces" value="Guest Room">
                                <div class="space-name">🛏️ Guest Room</div>
                            </div>

                            <div class="space-option" onclick="toggleSpace(this, 'Yoga Deck')">
                                <input type="checkbox" name="commonSpaces" value="Yoga Deck">
                                <div class="space-name">🧘 Yoga Deck</div>
                            </div>
                        </div>

                        <!-- Custom Spaces Section -->
                        <div class="custom-space-section">
                            <div
                                style="font-weight: 600; margin-bottom: 0.5rem; font-size: 0.7rem; color: var(--primary-color);">
                                ➕ Add Custom Spaces
                            </div>

                            <div class="custom-spaces-list" id="customSpacesList">
                                <!-- Custom spaces will be added here dynamically -->
                            </div>

                            <div class="add-custom-space">
                                <input type="text" id="customSpaceInput" placeholder="Enter custom space name">
                                <button type="button" class="add-space-btn" onclick="addCustomSpace()">Add</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Column 3: Subscription & Payment -->
            <div class="column">
                <div class="column-header">
                    <div class="column-title">💳 Subscription & Payment</div>
                    <div class="column-subtitle">Choose plan & complete setup</div>
                </div>

                <div class="column-content">
                    <div class="form-section">
                        <h3 class="section-title">Choose Plan</h3>
                        <div class="plans-grid">
                            <div class="plan-option selected" onclick="selectPlan('basic')">
                                <input type="radio" name="subscriptionPlan" value="basic" checked>
                                <div class="plan-title">Basic Plan</div>
                                <div class="plan-price">₹999/month</div>
                                <div class="plan-features">
                                    <ul>
                                        <li>Up to 50 residents</li>
                                        <li>Basic payment tracking</li>
                                        <li>Community notices</li>
                                        <li>Email support</li>
                                    </ul>
                                </div>
                            </div>

                            <div class="plan-option" onclick="selectPlan('standard')">
                                <input type="radio" name="subscriptionPlan" value="standard">
                                <div class="plan-title">Standard Plan</div>
                                <div class="plan-price">₹1,999/month</div>
                                <div class="plan-features">
                                    <ul>
                                        <li>Up to 200 residents</li>
                                        <li>Advanced payment system</li>
                                        <li>Issue management</li>
                                        <li>SMS & Email notifications</li>
                                        <li>Priority support</li>
                                    </ul>
                                </div>
                            </div>

                            <div class="plan-option" onclick="selectPlan('premium')">
                                <input type="radio" name="subscriptionPlan" value="premium">
                                <div class="plan-title">Premium Plan</div>
                                <div class="plan-price">₹3,999/month</div>
                                <div class="plan-features">
                                    <ul>
                                        <li>Unlimited residents</li>
                                        <li>Complete management suite</li>
                                        <li>Analytics & reports</li>
                                        <li>Multi-community support</li>
                                        <li>24/7 dedicated support</li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                    </div>

                    

                    <div class="form-section">
                        <h3 class="section-title">Payment Method</h3>

                        <div class="form-group">
                            <label for="paymentMethod">Payment Method <span class="required">*</span></label>
                            <select id="paymentMethod" name="paymentMethod" required>
                                <option value="">Select payment method</option>
                                <option value="credit_card">Credit Card</option>
                                <option value="debit_card">Debit Card</option>
                                <option value="net_banking">Net Banking</option>
                                <option value="upi">UPI</option>
                                <option value="wallet">Digital Wallet</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="button" class="btn btn-primary" onclick="processPayment()">Complete Setup &
                            Pay</button>
                        <button type="button" class="btn btn-secondary" onclick="resetForm()">Reset Form</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Payment Success Modal -->
    <div id="paymentSuccessModal" class="modal">
        <div class="modal-content">
            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"
                style="margin-bottom: 20px;">
                <path
                    d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z"
                    fill="#4CAF50" />
            </svg>
            <h3>Payment Successful!</h3>
            <p>Your subscription is now active.</p>
            <p>Thank you for choosing Urban Ease.</p>
            <p>You are being logged out. Please login again.</p>
        </div>
    </div>

   <script>// Global variables
let uploadedPhotos = [];
let customSpaces = [];
let selectedPlan = 'basic';

// Initialize when DOM loads
document.addEventListener('DOMContentLoaded', function() {
    initializeEventListeners();
    initializeDragAndDrop();
});

function initializeEventListeners() {
    // Photo input change event
    document.getElementById('photoInput').addEventListener('change', handlePhotoSelection);
    
    // Custom space input enter key
    document.getElementById('customSpaceInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            addCustomSpace();
        }
    });
    
    // Form submission
    document.getElementById('createCommunityForm').addEventListener('submit', function(e) {
        e.preventDefault();
        processPayment();
    });
}

function initializeDragAndDrop() {
    const uploadArea = document.querySelector('.photo-upload-area');
    
    uploadArea.addEventListener('dragover', function(e) {
        e.preventDefault();
        this.classList.add('dragover');
    });
    
    uploadArea.addEventListener('dragleave', function(e) {
        e.preventDefault();
        this.classList.remove('dragover');
    });
    
    uploadArea.addEventListener('drop', function(e) {
        e.preventDefault();
        this.classList.remove('dragover');
        
        const files = Array.from(e.dataTransfer.files);
        const imageFiles = files.filter(file => file.type.startsWith('image/'));
        
        if (imageFiles.length > 0) {
            handlePhotoFiles(imageFiles);
        }
    });
}

function handlePhotoSelection(event) {
    const files = Array.from(event.target.files);
    handlePhotoFiles(files);
}

function handlePhotoFiles(files) {
    // Limit total photos to 10
    const remainingSlots = 10 - uploadedPhotos.length;
    const filesToProcess = files.slice(0, remainingSlots);
    
    filesToProcess.forEach(file => {
        if (file.type.startsWith('image/') && file.size <= 5 * 1024 * 1024) { // 5MB limit
            const reader = new FileReader();
            reader.onload = function(e) {
                const photoData = {
                    file: file,
                    dataUrl: e.target.result,
                    name: file.name
                };
                uploadedPhotos.push(photoData);
                updatePhotoPreview();
            };
            reader.readAsDataURL(file);
        } else {
            showMessage('error', `File ${file.name} is either not an image or exceeds 5MB limit.`);
        }
    });
    
    // Reset the input
    event.target.value = '';
}

function updatePhotoPreview() {
    const previewGrid = document.getElementById('photoPreviewGrid');
    previewGrid.innerHTML = '';
    
    uploadedPhotos.forEach((photo, index) => {
        const previewDiv = document.createElement('div');
        previewDiv.className = 'photo-preview';
        previewDiv.innerHTML = `
            <img src="${photo.dataUrl}" alt="${photo.name}">
            <button type="button" class="photo-remove" onclick="removePhoto(${index})">&times;</button>
        `;
        previewGrid.appendChild(previewDiv);
    });
}

function removePhoto(index) {
    uploadedPhotos.splice(index, 1);
    updatePhotoPreview();
}

function toggleSpace(element, spaceName) {
    const checkbox = element.querySelector('input[type="checkbox"]');
    checkbox.checked = !checkbox.checked;
    element.classList.toggle('selected', checkbox.checked);
}

function addCustomSpace() {
    const input = document.getElementById('customSpaceInput');
    const spaceName = input.value.trim();
    
    if (spaceName && !customSpaces.includes(spaceName)) {
        customSpaces.push(spaceName);
        updateCustomSpacesList();
        input.value = '';
    } else if (customSpaces.includes(spaceName)) {
        showMessage('error', 'This space already exists.');
    }
}

function updateCustomSpacesList() {
    const listContainer = document.getElementById('customSpacesList');
    listContainer.innerHTML = '';
    
    customSpaces.forEach((space, index) => {
        const spaceTag = document.createElement('div');
        spaceTag.className = 'custom-space-tag';
        spaceTag.innerHTML = `
            ${space}
            <button type="button" class="remove-btn" onclick="removeCustomSpace(${index})">&times;</button>
        `;
        listContainer.appendChild(spaceTag);
    });
}

function removeCustomSpace(index) {
    customSpaces.splice(index, 1);
    updateCustomSpacesList();
}

function selectPlan(planType) {
    // Remove selected class from all plans
    document.querySelectorAll('.plan-option').forEach(plan => {
        plan.classList.remove('selected');
    });
    
    // Add selected class to clicked plan
    event.currentTarget.classList.add('selected');
    
    // Update the radio button
    const radio = event.currentTarget.querySelector('input[type="radio"]');
    radio.checked = true;
    
    selectedPlan = planType;
}

function validateForm() {
    const requiredFields = [
        'communityName',
        'communityLocation',
        'communityEmail',
        'paymentMethod'
    ];
    
    for (let fieldId of requiredFields) {
        const field = document.getElementById(fieldId);
        if (!field.value.trim()) {
            showMessage('error', `Please fill in the ${field.previousElementSibling.textContent.replace('*', '').trim()}.`);
            field.focus();
            return false;
        }
    }
    
    // Email validation
    const email = document.getElementById('communityEmail').value;
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        showMessage('error', 'Please enter a valid email address.');
        return false;
    }
    
    return true;
}

function getSelectedCommonSpaces() {
    const selectedSpaces = [];
    
    // Get predefined spaces
    document.querySelectorAll('.space-option input[type="checkbox"]:checked').forEach(checkbox => {
        selectedSpaces.push({
            type: checkbox.value,
            name: checkbox.value,
            bookable: true
        });
    });
    
    // Get custom spaces
    customSpaces.forEach(spaceName => {
        selectedSpaces.push({
            type: 'Other',
            name: spaceName,
            bookable: true
        });
    });
    
    return selectedSpaces;
}

async function processPayment() {
    if (!validateForm()) {
        return;
    }
    
    // Show loading state
    const submitBtn = document.querySelector('.btn-primary');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Processing...';
    submitBtn.disabled = true;
    
    try {
        // Prepare form data
        const formData = new FormData();
        
        // Basic community info
        formData.append('name', document.getElementById('communityName').value.trim());
        formData.append('location', document.getElementById('communityLocation').value.trim());
        formData.append('email', document.getElementById('communityEmail').value.trim());
        formData.append('description', document.getElementById('communityDescription').value.trim());
        formData.append('totalMembers', document.getElementById('totalMembers').value || 0);
        
        // Subscription info
        formData.append('subscriptionPlan', selectedPlan);
        formData.append('paymentMethod', document.getElementById('paymentMethod').value);
        
        // Common spaces
        formData.append('commonSpaces', JSON.stringify(getSelectedCommonSpaces()));
        
        // Add photos
        uploadedPhotos.forEach((photo, index) => {
            formData.append('photos', photo.file);
        });
        
        // Make API call
        const response = await fetch('/manager/communities', {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (response.ok) {
            showMessage('success', 'Community created successfully!');
            
            // Show success modal
            setTimeout(() => {
                document.getElementById('paymentSuccessModal').style.display = 'block';
                
                // Redirect after 3 seconds
                setTimeout(() => {
                    window.location.href = '/logout';
                }, 3000);
            }, 1000);
            
        } else {
            throw new Error(result.message || 'Failed to create community');
        }
        
    } catch (error) {
        console.error('Error creating community:', error);
        showMessage('error', error.message || 'An error occurred while creating the community. Please try again.');
    } finally {
        // Reset button state
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
}

function showMessage(type, message) {
    const messageElement = document.getElementById(type === 'success' ? 'successMessage' : 'errorMessage');
    messageElement.textContent = message;
    messageElement.style.display = 'block';
    
    // Hide the message after 5 seconds
    setTimeout(() => {
        messageElement.style.display = 'none';
    }, 5000);
    
    // Hide the other message type
    const otherMessageElement = document.getElementById(type === 'success' ? 'errorMessage' : 'successMessage');
    otherMessageElement.style.display = 'none';
}

function resetForm() {
    if (confirm('Are you sure you want to reset the form? All entered data will be lost.')) {
        // Reset form fields
        document.getElementById('createCommunityForm').reset();
        
        // Reset photos
        uploadedPhotos = [];
        updatePhotoPreview();
        
        // Reset custom spaces
        customSpaces = [];
        updateCustomSpacesList();
        
        // Reset plan selection
        document.querySelectorAll('.plan-option').forEach(plan => {
            plan.classList.remove('selected');
        });
        document.querySelector('.plan-option').classList.add('selected');
        document.querySelector('input[name="subscriptionPlan"][value="basic"]').checked = true;
        selectedPlan = 'basic';
        
        // Reset space selections
        document.querySelectorAll('.space-option').forEach(space => {
            space.classList.remove('selected');
            space.querySelector('input[type="checkbox"]').checked = false;
        });
        
        // Hide messages
        document.getElementById('successMessage').style.display = 'none';
        document.getElementById('errorMessage').style.display = 'none';
        
        showMessage('success', 'Form has been reset.');
    }
}

// Close modal when clicking outside
window.onclick = function(event) {
    const modal = document.getElementById('paymentSuccessModal');
    if (event.target === modal) {
        modal.style.display = 'none';
    }
}</script>
</body>

</html>