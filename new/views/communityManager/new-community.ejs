<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Urban Ease - Create Community</title>
    <link rel="stylesheet" href="/css/CommunityManager/create-community.css">
    
    <style>
        :root {
            --primary-color: #2c4b7c;
            --secondary-color: #6a93cb;
            --light-blue: #a1c4fd;
            --white: #ffffff;
            --light-gray: #f5f7fa;
            --text-dark: #333;
            --text-light: #666;
            --active-green: #4caf50;
            --pending-orange: #ff7043;
            --checked-gray: #9e9e9e;
            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --border-radius: 10px;
        }

        @font-face {
            font-family: 'MyFont';
            src: url('../imgs/Poppins/Poppins-Medium.ttf') format('woff2');
            font-weight: normal;
            font-style: normal;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background-color: var(--secondary-color);
            color: var(--text-dark);
            min-height: 100vh;
            font-size: 18px;
            width: 100%;
            overflow-x: hidden;
        }

        .container {
            display: flex;
            min-height: 100vh;
        }

        .main-content {
            
            flex: 1;
            padding: 20px;
            background-color: var(--light-gray);
            transition: 0.3s;
        }

        .page-header {
            margin-bottom: 25px;
        }

        .page-title {
            font-size: 28px;
            font-weight: bold;
            color: var(--text-dark);
            border-bottom: 2px solid #b9b9b9;
            padding-bottom: 5px;
        }

        .form-container {
            max-width: 900px;
            margin: 0 auto;
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            padding: 40px;
        }

        .form-section {
            margin-bottom: 35px;
        }

        .form-section:last-child {
            margin-bottom: 0;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 25px;
            margin-bottom: 20px;
        }

        .form-row.single {
            grid-template-columns: 1fr;
        }

        h2 {
            color: var(--primary-color);
            margin-bottom: 25px;
            font-size: 24px;
            font-weight: 600;
            position: relative;
            padding-bottom: 12px;
        }

        h2::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 50px;
            height: 3px;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            border-radius: 2px;
        }

        .form-group {
            margin-bottom: 25px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-dark);
            font-size: 15px;
        }

        .required {
            color: #e74c3c;
        }

        input,
        select,
        textarea {
            width: 100%;
            padding: 14px 16px;
            border: 2px solid #e1e8ed;
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s ease;
            background-color: #fafbfc;
        }

        input:focus,
        select:focus,
        textarea:focus {
            outline: none;
            border-color: var(--secondary-color);
            background-color: var(--white);
            box-shadow: 0 0 0 4px rgba(106, 147, 203, 0.1);
        }

        input:hover,
        select:hover,
        textarea:hover {
            border-color: var(--light-blue);
            background-color: var(--white);
        }

        textarea {
            resize: vertical;
            min-height: 100px;
        }

        .subscription-plan-selector {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 15px;
        }

        .plan-option {
            border: 2px solid #e1e8ed;
            border-radius: 12px;
            padding: 25px 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            background: linear-gradient(135deg, #fafbfc 0%, #f8f9fa 100%);
        }

        .plan-option:hover {
            border-color: var(--secondary-color);
            box-shadow: 0 8px 25px rgba(106, 147, 203, 0.15);
            transform: translateY(-2px);
        }

        .plan-option.selected {
            border-color: var(--primary-color);
            background: linear-gradient(135deg, rgba(44, 75, 124, 0.05) 0%, rgba(106, 147, 203, 0.05) 100%);
            box-shadow: 0 8px 25px rgba(44, 75, 124, 0.2);
        }

        .plan-option.selected::before {
            content: '✓';
            position: absolute;
            top: 15px;
            right: 15px;
            background: var(--primary-color);
            color: white;
            width: 25px;
            height: 25px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: bold;
        }

        .plan-option input[type="radio"] {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }

        .plan-title {
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 10px;
            font-size: 18px;
        }

        .plan-price {
            font-size: 28px;
            font-weight: 700;
            color: var(--active-green);
            margin-bottom: 15px;
        }

        .plan-features {
            font-size: 14px;
            color: var(--text-light);
            line-height: 1.6;
            text-align: left;
        }

        .plan-features ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .plan-features li {
            padding: 4px 0;
            position: relative;
            padding-left: 18px;
        }

        .plan-features li::before {
            content: '•';
            color: var(--secondary-color);
            font-weight: bold;
            position: absolute;
            left: 0;
        }

        .info-note {
            background: linear-gradient(135deg, rgba(76, 175, 80, 0.1) 0%, rgba(76, 175, 80, 0.05) 100%);
            border: 1px solid rgba(76, 175, 80, 0.3);
            color: var(--active-green);
            padding: 16px 20px;
            border-radius: 8px;
            margin-bottom: 25px;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 12px;
            font-weight: 500;
        }

        .info-note::before {
            content: "ℹ";
            font-weight: bold;
            font-size: 18px;
            background: var(--active-green);
            color: white;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }

        .form-actions {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 40px;
        }

        .btn {
            padding: 16px 40px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 160px;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--secondary-color) 0%, var(--primary-color) 100%);
            color: var(--white);
            box-shadow: 0 4px 15px rgba(44, 75, 124, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(44, 75, 124, 0.4);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            color: var(--text-dark);
            border: 2px solid #dee2e6;
        }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);
            transform: translateY(-1px);
        }

        .success-message {
            background-color: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            border: 1px solid #c3e6cb;
            display: none;
        }

        .error-message {
            background-color: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            border: 1px solid #f5c6cb;
            display: none;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: #fff;
            margin: 10% auto;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            max-width: 500px;
        }
        
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: black;
        }
        
        .payment-summary {
            margin: 20px 0;
            padding: 15px;
            background-color: #f5f7fa;
            border-radius: 8px;
        }
        
        .payment-summary h4 {
            margin-bottom: 10px;
            color: var(--primary-color);
        }
        
        .payment-summary div {
            display: flex;
            justify-content: space-between;
            margin: 10px 0;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 15px;
            }

            .form-container {
                grid-template-columns: 1fr;
                gap: 15px;
            }

            .subscription-plan-selector {
                grid-template-columns: 1fr;
            }

            .status-selector {
                flex-direction: column;
            }

            .form-actions {
                flex-direction: column;
                align-items: center;
            }
            
            .modal-content {
                margin: 20% auto;
                width: 90%;
            }
        }
    </style>
</head>

<body>
    <div class="container">
       
        <main class="main-content">
            <div class="page-header">
                <h1 class="page-title">Create New Community</h1>
            </div>

            <div id="successMessage" class="success-message"></div>
            <div id="errorMessage" class="error-message"></div>

            <div class="info-note">
                New communities are automatically set to Active status as they are operational upon creation.
            </div>

            <form id="createCommunityForm" class="form-container">
                <!-- Basic Information Section -->
                <div class="form-section">
                    <h2>Basic Information</h2>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="communityName">Community Name <span class="required">*</span></label>
                            <input type="text" id="communityName" name="name" required 
                                   placeholder="Enter community name">
                        </div>

                        <div class="form-group">
                            <label for="communityLocation">Location <span class="required">*</span></label>
                            <input type="text" id="communityLocation" name="location" required 
                                   placeholder="Enter community location">
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="communityEmail">Community Email <span class="required">*</span></label>
                            <input type="email" id="communityEmail" name="email" required 
                                   placeholder="community@example.com">
                        </div>

                        <div class="form-group">
                            <label for="totalMembers">Total Members</label>
                            <input type="number" id="totalMembers" name="totalMembers" min="0" 
                                   placeholder="Number of members" value="0">
                        </div>
                    </div>
                </div>

                <!-- Description Section -->
                <div class="form-section">
                    <h2>Community Description</h2>
                    
                    <div class="form-row single">
                        <div class="form-group">
                            <label for="communityDescription">Description</label>
                            <textarea id="communityDescription" name="description" 
                                      placeholder="Describe the community, its amenities, and features..."></textarea>
                        </div>
                    </div>
                </div>

                <!-- Subscription Plan Section -->
                <div class="form-section">
                    <h2>Subscription Plan</h2>
                    
                    <div class="form-group">
                        <label>Choose Subscription Plan <span class="required">*</span></label>
                        <div class="subscription-plan-selector">
                            <div class="plan-option selected" onclick="selectPlan('basic')">
                                <input type="radio" name="subscriptionPlan" value="basic" checked>
                                <div class="plan-title">Basic Plan</div>
                                <div class="plan-price">₹999/month</div>
                                <div class="plan-features">
                                    <ul>
                                        <li>Up to 50 residents</li>
                                        <li>Basic payment tracking</li>
                                        <li>Community notices</li>
                                        <li>Email support</li>
                                    </ul>
                                </div>
                            </div>
                            
                            <div class="plan-option" onclick="selectPlan('standard')">
                                <input type="radio" name="subscriptionPlan" value="standard">
                                <div class="plan-title">Standard Plan</div>
                                <div class="plan-price">₹1,999/month</div>
                                <div class="plan-features">
                                    <ul>
                                        <li>Up to 200 residents</li>
                                        <li>Advanced payment system</li>
                                        <li>Issue management</li>
                                        <li>SMS & Email notifications</li>
                                        <li>Priority support</li>
                                    </ul>
                                </div>
                            </div>
                            
                            <div class="plan-option" onclick="selectPlan('premium')">
                                <input type="radio" name="subscriptionPlan" value="premium">
                                <div class="plan-title">Premium Plan</div>
                                <div class="plan-price">₹3,999/month</div>
                                <div class="plan-features">
                                    <ul>
                                        <li>Unlimited residents</li>
                                        <li>Complete management suite</li>
                                        <li>Analytics & reports</li>
                                        <li>Multi-community support</li>
                                        <li>24/7 dedicated support</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Proceed to Payment</button>
                    <button type="button" class="btn btn-secondary" onclick="resetForm()">Reset Form</button>
                </div>
            </form>
        </main>
    </div>

    <!-- Payment Method Modal -->
    <div id="subscriptionPaymentModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('subscriptionPaymentModal')">&times;</span>
            <h2>Subscription Payment</h2>
            
            <form id="subscriptionPaymentForm">
                <div id="planDetails">
                    <!-- Plan details will be populated dynamically -->
                </div>
                
                <div class="form-group">
                    <label for="paymentMethod">Payment Method <span class="required">*</span></label>
                    <select id="paymentMethod" name="paymentMethod" required>
                        <option value="">Select payment method</option>
                        <option value="credit_card">Credit Card</option>
                        <option value="debit_card">Debit Card</option>
                        <option value="net_banking">Net Banking</option>
                        <option value="upi">UPI</option>
                        <option value="wallet">Digital Wallet</option>
                    </select>
                </div>
                
                <div class="payment-summary">
                    <h4>Payment Summary</h4>
                    <div style="display: flex; justify-content: space-between; margin: 10px 0;">
                        <span>Total Amount:</span>
                        <strong id="totalAmount"></strong>
                    </div>
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Process Payment</button>
                    <button type="button" class="btn btn-secondary" onclick="closeModal('subscriptionPaymentModal')">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Payment Success Modal -->
    <div id="paymentSuccessModal" class="modal">
        <div class="modal-content" style="text-align: center;">
            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-bottom: 20px;">
                <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z" fill="#4CAF50"/>
            </svg>
            <h3>Payment Successful!</h3>
            <p>Your subscription is now active.</p>
            <p>Thank you for choosing Urban Ease.</p>
            <p>You are being Logged Out . Please Login Again</p>
             </div>
    </div>

<script>
// Client-Side JavaScript for Community Creation Form with Subscription Payment

// Plan selection functionality
function selectPlan(planType) {
    // Remove selected class from all plans
    document.querySelectorAll('.plan-option').forEach(option => {
        option.classList.remove('selected');
    });
    
    // Add selected class to clicked plan
    event.currentTarget.classList.add('selected');
    
    // Check the radio button
    document.querySelector(`input[value="${planType}"]`).checked = true;
}

// Form submission handler
document.getElementById('createCommunityForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitBtn = document.querySelector('.btn-primary');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Processing...';
    submitBtn.disabled = true;
    
    try {
        if (!validateForm()) {
            showMessage('Please fill in all required fields correctly', 'error');
            return;
        }
        
        // Collect form data but don't submit yet
        const formData = new FormData(this);
        const communityData = Object.fromEntries(formData.entries());
        
        // Process data
        communityData.totalMembers = parseInt(communityData.totalMembers) || 0;
        ['name', 'location', 'email', 'description'].forEach(field => {
            if (communityData[field]) {
                communityData[field] = communityData[field].toString().trim();
            }
        });
        
        if (communityData.email) {
            communityData.email = communityData.email.toLowerCase();
        }
        
        // Show subscription payment modal with the collected data
        const selectedPlan = document.querySelector('input[name="subscriptionPlan"]:checked').value;
        showSubscriptionPaymentModal(communityData, selectedPlan);
        
    } catch (error) {
        console.error('Error:', error);
        showMessage(error.message || 'Error processing form', 'error');
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
});

// Show subscription payment modal
function showSubscriptionPaymentModal(communityData, planType) {
    const modal = document.getElementById('subscriptionPaymentModal');
    const planDetails = getPlanDetails(planType);
    
    // Update plan details in modal
    document.getElementById('planDetails').innerHTML = `
        <div class="plan-info" style="margin-bottom: 20px; padding: 15px; background: #f5f7fa; border-radius: 8px;">
            <h4>${planDetails.title} Plan</h4>
            <div class="plan-price" style="font-size: 24px; color: #4CAF50; margin: 10px 0;">${planDetails.price}/month</div>
        </div>
    `;
    
    // Update total amount
    document.getElementById('totalAmount').textContent = planDetails.price;
    
    // Show modal
    modal.style.display = 'block';
    
    // Reset payment form
    document.getElementById('subscriptionPaymentForm').reset();
    
    // Add event listener for payment form submission
    document.getElementById('subscriptionPaymentForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const paymentBtn = this.querySelector('.btn-primary');
        const originalText = paymentBtn.textContent;
        paymentBtn.textContent = 'Processing Payment...';
        paymentBtn.disabled = true;
        
        try {
            // Validate payment method is selected
            const paymentMethod = document.getElementById('paymentMethod').value;
            if (!paymentMethod) {
                showMessage('Please select a payment method', 'error');
                return;
            }
            
            // Process payment and create community
            const result = await processSubscriptionPayment(communityData, planType, paymentMethod);
            
            if (result.success) {
    closeModal('subscriptionPaymentModal');
    document.getElementById('paymentSuccessModal').style.display = 'block';

    // Add this block to logout and redirect
    setTimeout(() => {
        // Optional: clear token or session manually
        localStorage.removeItem('token');
        
        // Redirect to login page
        window.location.href = '/login'; // change this to your actual login page URL
    }, 2000); // delay for 3 seconds to let user see success
}
else {
                throw new Error(result.message || 'Payment failed');
            }
            
        } catch (error) {
            console.error('Payment error:', error);
            showMessage(error.message || 'Error processing payment', 'error');
        } finally {
            paymentBtn.textContent = originalText;
            paymentBtn.disabled = false;
        }
    });
}

// Process subscription payment and create community
async function processSubscriptionPayment(communityData, planType, paymentMethod) {
    try {
        // Get plan details
        const planDetails = getPlanDetails(planType);
        
        // Prepare data for backend
        const requestData = {
            communityData: communityData,
            subscriptionPlan: planType,
            paymentDetails: {
                amount: parseFloat(planDetails.price.replace(/[^\d.]/g, '')),
                paymentMethod: paymentMethod,
                transactionId: `TXN_${Date.now()}`
            }
        };
        
        // Call backend endpoint that handles both payment and community creation
        const response = await fetch('/manager/create-with-payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify(requestData)
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.message || 'Payment and community creation failed');
        }
        
        return result;
    } catch (error) {
        console.error('Payment processing error:', error);
        throw error;
    }
}

// Close modal
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

// Get plan details
function getPlanDetails(planType) {
    const plans = {
        basic: {
            title: 'Basic',
            price: '₹999',
            features: [
                'Up to 50 residents',
                'Basic payment tracking',
                'Community notices',
                'Email support'
            ],
            apiValue: 'basic'
        },
        standard: {
            title: 'Standard',
            price: '₹1,999',
            features: [
                'Up to 200 residents',
                'Advanced payment system',
                'Issue management',
                'SMS & Email notifications',
                'Priority support'
            ],
            apiValue: 'standard'
        },
        premium: {
            title: 'Premium',
            price: '₹3,999',
            features: [
                'Unlimited residents',
                'Complete management suite',
                'Analytics & reports',
                'Multi-community support',
                '24/7 dedicated support'
            ],
            apiValue: 'premium'
        }
    };
    
    return plans[planType] || plans.basic;
}

// Enhanced form validation
function validateForm() {
    const requiredFields = [
        { name: 'name', label: 'Community Name', element: document.querySelector('[name="name"]') },
        { name: 'location', label: 'Location', element: document.querySelector('[name="location"]') },
        { name: 'email', label: 'Email', element: document.querySelector('[name="email"]') }
    ];
    
    let isValid = true;
    let firstErrorField = null;
    
    // Clear previous error states
    document.querySelectorAll('input, select, textarea').forEach(field => {
        field.style.borderColor = '#e1e8ed';
    });
    
    // Validate required fields
    requiredFields.forEach(field => {
        const value = field.element.value.trim();
        
        if (!value) {
            field.element.style.borderColor = '#e74c3c';
            if (!firstErrorField) {
                firstErrorField = field;
            }
            isValid = false;
        }
    });
    
    // Email validation
    const emailInput = document.querySelector('[name="email"]');
    const emailValue = emailInput.value.trim();
    if (emailValue) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(emailValue)) {
            emailInput.style.borderColor = '#e74c3c';
            if (!firstErrorField) {
                firstErrorField = { label: 'Valid Email', element: emailInput };
            }
            isValid = false;
        }
    }
    
    // Community name length validation
    const nameInput = document.querySelector('[name="name"]');
    const nameValue = nameInput.value.trim();
    if (nameValue && nameValue.length < 3) {
        nameInput.style.borderColor = '#e74c3c';
        if (!firstErrorField) {
            firstErrorField = { label: 'Community Name (minimum 3 characters)', element: nameInput };
        }
        isValid = false;
    }
    
    // Total members validation (must be non-negative)
    const totalMembersInput = document.querySelector('[name="totalMembers"]');
    const totalMembersValue = parseInt(totalMembersInput.value);
    if (totalMembersValue < 0) {
        totalMembersInput.style.borderColor = '#e74c3c';
        if (!firstErrorField) {
            firstErrorField = { label: 'Total Members (cannot be negative)', element: totalMembersInput };
        }
        isValid = false;
    }
    
    // Focus on first error field
    if (firstErrorField) {
        firstErrorField.element.focus();
        showMessage(`Please check the ${firstErrorField.label} field`, 'error');
    }
    
    return isValid;
}

// Show success/error messages
function showMessage(message, type) {
    const successDiv = document.getElementById('successMessage');
    const errorDiv = document.getElementById('errorMessage');
    
    // Hide both messages first
    successDiv.style.display = 'none';
    errorDiv.style.display = 'none';
    
    if (type === 'success') {
        successDiv.textContent = message;
        successDiv.style.display = 'block';
    } else {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
    }
    
    // Scroll to top to show message
    window.scrollTo({ top: 0, behavior: 'smooth' });
    
    // Auto-hide messages after 5 seconds
    setTimeout(() => {
        successDiv.style.display = 'none';
        errorDiv.style.display = 'none';
    }, 5000);
}

// Reset form functionality
function resetForm() {
    const form = document.getElementById('createCommunityForm');
    form.reset();
    
    // Reset plan selection to basic
    document.querySelectorAll('.plan-option').forEach(option => {
        option.classList.remove('selected');
    });
    document.querySelector('.plan-option').classList.add('selected');
    document.querySelector('input[value="basic"]').checked = true;
    
    // Reset field borders
    document.querySelectorAll('input, select, textarea').forEach(field => {
        field.style.borderColor = '#e1e8ed';
    });
    
    // Hide messages
    document.getElementById('successMessage').style.display = 'none';
    document.getElementById('errorMessage').style.display = 'none';
    
    // Focus on first field
    document.querySelector('[name="name"]').focus();
}

// Initialize event listeners when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Email validation on blur
    document.getElementById('communityEmail').addEventListener('blur', function() {
        const email = this.value.trim();
        if (email) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                this.style.borderColor = '#e74c3c';
                showMessage('Please enter a valid email address', 'error');
            } else {
                this.style.borderColor = '#4caf50';
                // Hide error message if email is now valid
                const errorDiv = document.getElementById('errorMessage');
                if (errorDiv.textContent.includes('email')) {
                    errorDiv.style.display = 'none';
                }
            }
        }
    });
    
    // Community name validation on input
    document.getElementById('communityName').addEventListener('input', function() {
        const name = this.value.trim();
        if (name.length > 0 && name.length < 3) {
            this.style.borderColor = '#ff7043';
        } else if (name.length >= 3) {
            this.style.borderColor = '#4caf50';
        } else {
            this.style.borderColor = '#e1e8ed';
        }
    });
    
    // Total members validation
    document.getElementById('totalMembers').addEventListener('input', function() {
        const value = parseInt(this.value);
        if (isNaN(value) || value < 0) {
            this.style.borderColor = '#e74c3c';
        } else {
            this.style.borderColor = '#4caf50';
        }
    });
    
    // Clear error styling on focus
    document.querySelectorAll('input, select, textarea').forEach(field => {
        field.addEventListener('focus', function() {
            if (this.style.borderColor === 'rgb(231, 76, 60)') { // #e74c3c in RGB
                this.style.borderColor = '#e1e8ed';
            }
        });
    });
    
    // Close modals when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target.className === 'modal') {
            event.target.style.display = 'none';
        }
    });
});

// Keyboard shortcuts
document.addEventListener('keydown', function(e) {
    // Ctrl + Enter to submit form
    if (e.ctrlKey && e.key === 'Enter') {
        e.preventDefault();
        document.getElementById('createCommunityForm').dispatchEvent(new Event('submit'));
    }
    
    // Escape to reset form
    if (e.key === 'Escape') {
        e.preventDefault();
        resetForm();
    }
});

// Prevent form submission on Enter key in input fields (except textarea)
document.querySelectorAll('input').forEach(input => {
    input.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            // Move to next field or submit if it's the last field
            const formElements = Array.from(document.querySelectorAll('input, select, textarea'));
            const currentIndex = formElements.indexOf(this);
            if (currentIndex < formElements.length - 1) {
                formElements[currentIndex + 1].focus();
            }
        }
    });
});

console.log('Community creation form JavaScript loaded successfully');
</script>
</body>
</html>