<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Community Management</title>
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <link rel="stylesheet" href="/css/admin/dashboard.css">
</head>
<body>
    <!-- Sidebar -->
     <%- include('../partials/sidebarAdmin') %>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <div class="header">
            <div class="header-left">
                <button class="menu-toggle" id="mobileMenuToggle">
                    <span class="material-symbols-rounded">menu</span>
                </button>
                <div>
                    <h1>Dashboard Overview</h1>
                    <div class="header-subtitle">Welcome back, Admin! Here's what's happening across all communities.</div>
                </div>
            </div>
            
        </div>

        <!-- KPI Cards -->
        <div class="kpi-grid">
            <div class="kpi-card communities">
                <div class="kpi-header">
                    <div class="kpi-icon">
                        <span class="material-symbols-rounded">apartment</span>
                    </div>
                    <div class="kpi-title">Total Communities</div>
                </div>
                <div class="kpi-value"></div>
               
            </div>

            <div class="kpi-card residents">
                <div class="kpi-header">
                    <div class="kpi-icon">
                        <span class="material-symbols-rounded">groups</span>
                    </div>
                    <div class="kpi-title">Total Residents</div>
                </div>
                <div class="kpi-value"></div>
               
            </div>

            <div class="kpi-card applications">
                <div class="kpi-header">
                    <div class="kpi-icon">
                        <span class="material-symbols-rounded">pending_actions</span>
                    </div>
                    <div class="kpi-title">Pending Applications</div>
                </div>
                <div class="kpi-value"></div>
               
            </div>

            <div class="kpi-card revenue">
                <div class="kpi-header">
                    <div class="kpi-icon">
                        <span class="material-symbols-rounded">account_balance_wallet</span>
                    </div>
                    <div class="kpi-title">Monthly Revenue</div>
                </div>
                <div class="kpi-value"></div>
              
            </div>

          
        </div>

        <!-- Charts Section -->
        <div class="charts-grid">
            <div class="chart-card">
                <div class="chart-header">
                    <div class="chart-title">Portfolio Growth & Revenue</div>
                    <div class="chart-filter">
                        <button class="filter-btn active" data-period="6M">6M</button>
                        <button class="filter-btn" data-period="1Y">1Y</button>
                        <button class="filter-btn" data-period="All">All</button>
                    </div>
                </div>
                <div class="chart-container">
                    <canvas id="growthChart"></canvas>
                </div>
            </div>

            <div class="chart-card">
                <div class="chart-header">
                    <div class="chart-title">Applications Overview</div>
                </div>
                <div class="applications-overview">
                    <div class="applications-summary">
                        <div class="summary-item">
                            <div class="summary-value"></div>
                            <div class="summary-label">This Month</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-value"></div>
                            <div class="summary-label">Pending</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-value"></div>
                            <div class="summary-label">Approved</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-value"></div>
                            <div class="summary-label">Rejected</div>
                        </div>
                    </div>
                    
                   <div class="applications-charts" style="display: flex; justify-content: center; align-items: center; gap: 40px; flex-wrap: wrap;">
    <div class="status-chart-container" style="display: flex; align-items: center; justify-content: center; gap: 40px;">
        <div class="doughnut-wrapper" >
            <canvas id="applicationsStatusChart"></canvas>
        </div>
        <div class="status-summary" style="display: flex; flex-direction: column; gap: 16px;">
            <div class="status-item" style="display: flex; justify-content: space-between; align-items: center; width: 160px;">
                <div class="status-label" style="display: flex; align-items: center; gap: 8px; font-weight: 500;">
                    <div class="status-color" style="width: 14px; height: 14px; background: #10b981; border-radius: 50%;"></div>
                    Approved
                </div>
                <div class="status-value" style="font-weight: 600;"></div>
            </div>
            <div class="status-item" style="display: flex; justify-content: space-between; align-items: center; width: 160px;">
                <div class="status-label" style="display: flex; align-items: center; gap: 8px; font-weight: 500;">
                    <div class="status-color" style="width: 14px; height: 14px; background: #f59e0b; border-radius: 50%;"></div>
                    Pending
                </div>
                <div class="status-value" style="font-weight: 600;"></div>
            </div>
            <div class="status-item" style="display: flex; justify-content: space-between; align-items: center; width: 160px;">
                <div class="status-label" style="display: flex; align-items: center; gap: 8px; font-weight: 500;">
                    <div class="status-color" style="width: 14px; height: 14px; background: #ef4444; border-radius: 50%;"></div>
                    Rejected
                </div>
                <div class="status-value" style="font-weight: 600;"></div>
            </div>
        </div>
    </div>
</div>

                </div>
            </div>
        </div>

      
    </div>

  <script>
const API_BASE_URL = window.location.origin + '/admin/api';
let growthChart;
let applicationsStatusChart;
let autoRefreshInterval;
let currentChartPeriod = '6M';

// Auto-refresh configuration (30 seconds = 30000ms)
const AUTO_REFRESH_INTERVAL = 30000;

function formatCurrency(value) {
    if (typeof value !== 'number') return value;
    return `â‚¹${value.toLocaleString()}`;
}

function showLoading(target = 'body') {
    if (target === 'body') {
        document.body.classList.add('loading');
    } else {
        const element = document.querySelector(target);
        if (element) element.classList.add('loading');
    }
}

function hideLoading(target = 'body') {
    if (target === 'body') {
        document.body.classList.remove('loading');
    } else {
        const element = document.querySelector(target);
        if (element) element.classList.remove('loading');
    }
}

function showError(message) {
    console.error('Dashboard Error:', message);
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.textContent = `Error: ${message}`;
    errorDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #ef4444;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 10000;
        animation: slideIn 0.3s ease;
    `;
    document.body.appendChild(errorDiv);
    setTimeout(() => errorDiv.remove(), 5000);
}

async function fetchDashboardData() {
    const response = await fetch(`${API_BASE_URL}/dashboard`);
    if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    const result = await response.json();
    return result.data ?? result;
}

async function fetchChartData(period = '6M') {
    const response = await fetch(`${API_BASE_URL}/dashboard/charts?period=${encodeURIComponent(period)}`);
    if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    const result = await response.json();
    return result.data ?? result;
}

function updateKPIs(data) {
    const { kpis } = data;
    document.querySelector('.kpi-card.communities .kpi-value').textContent = kpis.totalCommunities;
    document.querySelector('.kpi-card.residents .kpi-value').textContent = kpis.totalResidents.toLocaleString();
    document.querySelector('.kpi-card.applications .kpi-value').textContent = kpis.pendingApplications;
    document.querySelector('.kpi-card.revenue .kpi-value').textContent = formatCurrency(kpis.monthlyRevenue);
}

function updateApplicationsSummary(data) {
    const { applicationsStatus } = data;
    const total = applicationsStatus.approved + applicationsStatus.pending + applicationsStatus.rejected;
    const summaryValues = document.querySelectorAll('.summary-item .summary-value');
    if (summaryValues.length >= 4) {
        summaryValues[0].textContent = total;
        summaryValues[1].textContent = applicationsStatus.pending;
        summaryValues[2].textContent = applicationsStatus.approved;
        summaryValues[3].textContent = applicationsStatus.rejected;
    }
    const statusItems = document.querySelectorAll('.status-item .status-value');
    if (statusItems.length >= 3) {
        statusItems[0].textContent = applicationsStatus.approved;
        statusItems[1].textContent = applicationsStatus.pending;
        statusItems[2].textContent = applicationsStatus.rejected;
    }
}

function updateGrowthChart(chartData) {
    const ctx = document.getElementById('growthChart');
    if (!ctx) return;
    if (growthChart) growthChart.destroy();
    const { labels, revenue } = chartData;
    growthChart = new Chart(ctx.getContext('2d'), {
        type: 'line',
        data: {
            labels,
            datasets: [{
                label: 'Revenue (â‚¹)',
                data: revenue,
                borderColor: '#10b981',
                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                borderWidth: 3,
                fill: true,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: { mode: 'index', intersect: false },
            plugins: {
                legend: { position: 'top', labels: { usePointStyle: true, padding: 20, font: { size: 12 } } },
                tooltip: {
                    callbacks: {
                        label: c => {
                            let label = c.dataset.label ? c.dataset.label + ': ' : '';
                            if (c.parsed.y !== null) label += 'â‚¹' + c.parsed.y.toLocaleString();
                            return label;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    title: { display: true, text: 'Revenue (â‚¹)' },
                    ticks: { callback: v => 'â‚¹' + v.toLocaleString() },
                    grid: { drawOnChartArea: false }
                },
                x: { grid: { display: false } }
            },
            elements: { point: { radius: 4, hoverRadius: 6 } }
        }
    });
}

function updateApplicationsStatusChart(data) {
    const ctx = document.getElementById('applicationsStatusChart');
    if (!ctx) return;
    if (applicationsStatusChart) applicationsStatusChart.destroy();
    applicationsStatusChart = new Chart(ctx.getContext('2d'), {
        type: 'doughnut',
        data: {
            labels: ['Approved', 'Pending', 'Rejected'],
            datasets: [{
                data: [data.approved, data.pending, data.rejected],
                backgroundColor: ['#10b981', '#f59e0b', '#ef4444'],
                borderWidth: 0,
                cutout: '65%'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: false },
                tooltip: {
                    callbacks: {
                        label: c => {
                            const total = c.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = ((c.parsed / total) * 100).toFixed(1);
                            return `${c.label}: ${c.parsed} (${percentage}%)`;
                        }
                    }
                }
            }
        }
    });
}

function updateCharts(data) {
    updateGrowthChart(data.growthChart);
    updateApplicationsStatusChart(data.applicationsStatus);
}

// Handle chart filter clicks - only updates chart data
async function handleChartFilterClick(period) {
    showLoading('.chart-card');
    try {
        currentChartPeriod = period;
        const data = await fetchChartData(period);
        updateGrowthChart(data.growthChart);
    } catch (error) {
        showError('Failed to update chart');
    } finally {
        hideLoading('.chart-card');
    }
}

// Auto-refresh function - refreshes all dashboard data
async function autoRefreshDashboard() {
    try {
        // Fetch full dashboard data
        const dashboardData = await fetchDashboardData();
        
        // Update KPIs and applications summary
        updateKPIs(dashboardData);
        updateApplicationsSummary(dashboardData.chartData);
        updateApplicationsStatusChart(dashboardData.chartData.applicationsStatus);
        
        // Fetch and update growth chart with current period
        const chartData = await fetchChartData(currentChartPeriod);
        updateGrowthChart(chartData.growthChart);
        
        console.log('Dashboard auto-refreshed at', new Date().toLocaleTimeString());
    } catch (error) {
        console.error('Auto-refresh failed:', error);
        // Don't show error message for auto-refresh failures to avoid spam
    }
}

// Start auto-refresh
function startAutoRefresh() {
    if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
    }
    autoRefreshInterval = setInterval(autoRefreshDashboard, AUTO_REFRESH_INTERVAL);
    console.log(`Auto-refresh started: every ${AUTO_REFRESH_INTERVAL / 1000} seconds`);
}

// Stop auto-refresh
function stopAutoRefresh() {
    if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
        autoRefreshInterval = null;
        console.log('Auto-refresh stopped');
    }
}

// Initial dashboard load
async function initializeDashboard() {
    showLoading();
    try {
        const dashboardData = await fetchDashboardData();
        updateKPIs(dashboardData);
        updateApplicationsSummary(dashboardData.chartData);
        updateCharts(dashboardData.chartData);
        
        // Start auto-refresh after successful initialization
        startAutoRefresh();
    } catch (error) {
        showError('Failed to load dashboard data');
    } finally {
        hideLoading();
    }
}

document.addEventListener('DOMContentLoaded', () => {
    initializeDashboard();
    
    // Sidebar toggles
    const sidebar = document.getElementById('sidebar');
    const sidebarToggler = document.getElementById('sidebarToggler');
    const menuToggler = document.getElementById('menuToggler');
    const mobileMenuToggle = document.getElementById('mobileMenuToggle');
    
    if (sidebarToggler) {
        sidebarToggler.addEventListener('click', () => sidebar.classList.toggle('collapsed'));
    }
    
    const mobileTogglers = [menuToggler, mobileMenuToggle].filter(Boolean);
    mobileTogglers.forEach(toggler => {
        toggler.addEventListener('click', () => {
            sidebar.classList.toggle('menu-active');
            const icon = toggler.querySelector('span');
            if (icon) icon.textContent = sidebar.classList.contains('menu-active') ? 'close' : 'menu';
        });
    });
    
    document.addEventListener('click', e => {
        if (window.innerWidth <= 1024 && !sidebar.contains(e.target) &&
            !mobileTogglers.some(t => t && t.contains(e.target))) {
            sidebar.classList.remove('menu-active');
            mobileTogglers.forEach(t => {
                const icon = t && t.querySelector('span');
                if (icon) icon.textContent = 'menu';
            });
        }
    });
    
    // Chart filter buttons
    const filterBtns = document.querySelectorAll('.filter-btn');
    filterBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            filterBtns.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            const period = this.getAttribute('data-period') || this.textContent;
            handleChartFilterClick(period);
        });
    });
    
    window.addEventListener("resize", () => {
        if (window.innerWidth >= 1024) {
            sidebar.classList.remove("menu-active");
            mobileTogglers.forEach(t => {
                const icon = t && t.querySelector('span');
                if (icon) icon.textContent = 'menu';
            });
        }
    });
    
    // Stop auto-refresh when page is hidden (performance optimization)
    document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
            stopAutoRefresh();
        } else {
            startAutoRefresh();
            // Immediately refresh when page becomes visible
            autoRefreshDashboard();
        }
    });
});

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
    stopAutoRefresh();
});

const loadingStyles = `
    .loading { cursor: wait; }
    .loading .kpi-value, .loading .chart-container { opacity: 0.6; pointer-events: none; }
    .chart-card.loading .chart-container { opacity: 0.6; }
    .error-message { animation: slideIn 0.3s ease; }
    @keyframes slideIn { from { transform: translateX(100%); opacity: 0; } to { transform: translateX(0); opacity: 1; } }
`;
const styleSheet = document.createElement('style');
styleSheet.textContent = loadingStyles;
document.head.appendChild(styleSheet);

// Expose API for external control
window.dashboardAPI = { 
    refresh: initializeDashboard, 
    updateCharts: handleChartFilterClick, 
    fetchDashboardData,
    startAutoRefresh,
    stopAutoRefresh,
    setAutoRefreshInterval: (ms) => {
        AUTO_REFRESH_INTERVAL = ms;
        if (autoRefreshInterval) {
            startAutoRefresh();
        }
    }
};
</script>

</body>
</html>