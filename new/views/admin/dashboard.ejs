<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Community Management</title>
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <link rel="stylesheet" href="/css/admin/dashboard.css">
</head>
<body>
    <!-- Sidebar -->
     <%- include('../partials/sidebarAdmin') %>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <div class="header">
            <div class="header-left">
                <button class="menu-toggle" id="mobileMenuToggle">
                    <span class="material-symbols-rounded">menu</span>
                </button>
                <div>
                    <h1>Dashboard Overview</h1>
                    <div class="header-subtitle">Welcome back, Admin! Here's what's happening across all communities.</div>
                </div>
            </div>
            
        </div>

        <!-- KPI Cards -->
        <div class="kpi-grid">
            <div class="kpi-card communities">
                <div class="kpi-header">
                    <div class="kpi-icon">
                        <span class="material-symbols-rounded">apartment</span>
                    </div>
                    <div class="kpi-title">Total Communities</div>
                </div>
                <div class="kpi-value"></div>
               
            </div>

            <div class="kpi-card residents">
                <div class="kpi-header">
                    <div class="kpi-icon">
                        <span class="material-symbols-rounded">groups</span>
                    </div>
                    <div class="kpi-title">Total Residents</div>
                </div>
                <div class="kpi-value"></div>
               
            </div>

            <div class="kpi-card applications">
                <div class="kpi-header">
                    <div class="kpi-icon">
                        <span class="material-symbols-rounded">pending_actions</span>
                    </div>
                    <div class="kpi-title">Pending Applications</div>
                </div>
                <div class="kpi-value"></div>
               
            </div>

            <div class="kpi-card revenue">
                <div class="kpi-header">
                    <div class="kpi-icon">
                        <span class="material-symbols-rounded">account_balance_wallet</span>
                    </div>
                    <div class="kpi-title">Monthly Revenue</div>
                </div>
                <div class="kpi-value"></div>
              
            </div>

          
        </div>

        <!-- Charts Section -->
        <div class="charts-grid">
            <div class="chart-card">
                <div class="chart-header">
                    <div class="chart-title">Portfolio Growth & Revenue</div>
                    <div class="chart-filter">
                        <button class="filter-btn active">6M</button>
                        <button class="filter-btn">1Y</button>
                        <button class="filter-btn">All</button>
                    </div>
                </div>
                <div class="chart-container">
                    <canvas id="growthChart"></canvas>
                </div>
            </div>

            <div class="chart-card">
                <div class="chart-header">
                    <div class="chart-title">Applications Overview</div>
                </div>
                <div class="applications-overview">
                    <div class="applications-summary">
                        <div class="summary-item">
                            <div class="summary-value"></div>
                            <div class="summary-label">This Month</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-value"></div>
                            <div class="summary-label">Pending</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-value"></div>
                            <div class="summary-label">Approved</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-value"></div>
                            <div class="summary-label">Rejected</div>
                        </div>
                    </div>
                    
                    <div class="applications-charts">
                        <div class="trend-chart-container">
                            <canvas id="applicationsTrendChart"></canvas>
                        </div>
                        <div class="status-chart-container">
                            <div class="doughnut-wrapper">
                                <canvas id="applicationsStatusChart"></canvas>
                            </div>
                            <div class="status-summary">
                                <div class="status-item">
                                    <div class="status-label">
                                        <div class="status-color" style="background: #10b981;"></div>
                                        Approved
                                    </div>
                                    <div class="status-value"></div>
                                </div>
                                <div class="status-item">
                                    <div class="status-label">
                                        <div class="status-color" style="background: #f59e0b;"></div>
                                        Pending
                                    </div>
                                    <div class="status-value"></div>
                                </div>
                                <div class="status-item">
                                    <div class="status-label">
                                        <div class="status-color" style="background: #ef4444;"></div>
                                        Rejected
                                    </div>
                                    <div class="status-value"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

      
    </div>

   <script>// Configuration
const API_BASE_URL = window.location.origin + '/admin/api';

// Global variables for charts
let growthChart;
let applicationsStatusChart;

// Utility functions
function formatCurrency(value) {
    return `â‚¹${value.toLocaleString()}`;
}

function showLoading() {
    document.body.classList.add('loading');
}

function hideLoading() {
    document.body.classList.remove('loading');
}

function showError(message) {
    console.error('Dashboard Error:', message);
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.textContent = `Error: ${message}`;
    errorDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #ef4444;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 10000;
        animation: slideIn 0.3s ease;
    `;
    document.body.appendChild(errorDiv);
    setTimeout(() => errorDiv.remove(), 5000);
}

// API functions
async function fetchDashboardData() {
    try {
        const response = await fetch(`${API_BASE_URL}/dashboard`);
        if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        const result = await response.json();
        return result.data;
    } catch (error) {
        console.error('Failed to fetch dashboard data:', error);
        throw error;
    }
}

async function fetchChartData(period = '6M') {
    try {
        const response = await fetch(`${API_BASE_URL}/dashboard/charts?period=${period}`);
        if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        const result = await response.json();
        return result.data;
    } catch (error) {
        console.error('Failed to fetch chart data:', error);
        throw error;
    }
}

// Update KPIs
function updateKPIs(data) {
    const { kpis } = data;
    
    const totalCommunitiesEl = document.querySelector('.kpi-card.communities .kpi-value');
    const totalResidentsEl = document.querySelector('.kpi-card.residents .kpi-value');
    const pendingApplicationsEl = document.querySelector('.kpi-card.applications .kpi-value');
    const monthlyRevenueEl = document.querySelector('.kpi-card.revenue .kpi-value');
    
    if (totalCommunitiesEl) totalCommunitiesEl.textContent = kpis.totalCommunities;
    if (totalResidentsEl) totalResidentsEl.textContent = kpis.totalResidents.toLocaleString();
    if (pendingApplicationsEl) pendingApplicationsEl.textContent = kpis.pendingApplications;
    if (monthlyRevenueEl) monthlyRevenueEl.textContent = formatCurrency(kpis.monthlyRevenue);
}

// Update Applications Summary
function updateApplicationsSummary(data) {
    const { applicationsStatus } = data;
    const total = applicationsStatus.approved + applicationsStatus.pending + applicationsStatus.rejected;
    
    const summaryValues = document.querySelectorAll('.summary-item .summary-value');
    if (summaryValues.length >= 4) {
        summaryValues[0].textContent = total;
        summaryValues[1].textContent = applicationsStatus.pending;
        summaryValues[2].textContent = applicationsStatus.approved;
        summaryValues[3].textContent = applicationsStatus.rejected;
    }
    
    // Update status summary in doughnut chart section
    const statusItems = document.querySelectorAll('.status-item .status-value');
    if (statusItems.length >= 3) {
        statusItems[0].textContent = applicationsStatus.approved;
        statusItems[1].textContent = applicationsStatus.pending;
        statusItems[2].textContent = applicationsStatus.rejected;
    }
}

// Update Growth Chart
function updateGrowthChart(chartData) {
    const ctx = document.getElementById('growthChart');
    if (!ctx) return;
    
    // Destroy existing chart
    if (growthChart) {
        growthChart.destroy();
    }
    
    const { labels, communities, revenue } = chartData;
    
    growthChart = new Chart(ctx.getContext('2d'), {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'New Communities',
                data: communities,
                borderColor: '#3b82f6',
                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                borderWidth: 3,
                fill: true,
                tension: 0.4,
                yAxisID: 'y'
            }, {
                label: 'Revenue (â‚¹)',
                data: revenue,
                borderColor: '#10b981',
                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                borderWidth: 3,
                fill: true,
                tension: 0.4,
                yAxisID: 'y1'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
                mode: 'index',
                intersect: false,
            },
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        usePointStyle: true,
                        padding: 20,
                        font: {
                            size: 12
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            let label = context.dataset.label || '';
                            if (label) {
                                label += ': ';
                            }
                            if (context.parsed.y !== null) {
                                if (context.datasetIndex === 1) {
                                    label += 'â‚¹' + context.parsed.y.toLocaleString();
                                } else {
                                    label += context.parsed.y;
                                }
                            }
                            return label;
                        }
                    }
                }
            },
            scales: {
                y: {
                    type: 'linear',
                    display: true,
                    position: 'left',
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Communities'
                    },
                    grid: {
                        color: 'rgba(21, 26, 45, 0.05)'
                    }
                },
                y1: {
                    type: 'linear',
                    display: true,
                    position: 'right',
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Revenue (â‚¹)'
                    },
                    grid: {
                        drawOnChartArea: false,
                    },
                    ticks: {
                        callback: function(value) {
                            return 'â‚¹' + value.toLocaleString();
                        }
                    }
                },
                x: {
                    grid: {
                        display: false
                    }
                }
            },
            elements: {
                point: {
                    radius: 4,
                    hoverRadius: 6
                }
            }
        }
    });
}

// Update Applications Status Chart
function updateApplicationsStatusChart(data) {
    const ctx = document.getElementById('applicationsStatusChart');
    if (!ctx) return;
    
    // Destroy existing chart
    if (applicationsStatusChart) {
        applicationsStatusChart.destroy();
    }
    
    applicationsStatusChart = new Chart(ctx.getContext('2d'), {
        type: 'doughnut',
        data: {
            labels: ['Approved', 'Pending', 'Rejected'],
            datasets: [{
                data: [data.approved, data.pending, data.rejected],
                backgroundColor: [
                    '#10b981',
                    '#f59e0b',
                    '#ef4444'
                ],
                borderWidth: 0,
                cutout: '65%'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = ((context.parsed / total) * 100).toFixed(1);
                            return context.label + ': ' + context.parsed + ' (' + percentage + '%)';
                        }
                    }
                }
            }
        }
    });
}

// Update all charts
function updateCharts(data) {
    updateGrowthChart(data.growthChart);
    updateApplicationsStatusChart(data.applicationsStatus);
}

// Handle chart filter click
async function handleChartFilterClick(period) {
    showLoading();
    try {
        const data = await fetchChartData(period);
        updateGrowthChart(data.growthChart);
    } catch (error) {
        showError('Failed to update charts');
    } finally {
        hideLoading();
    }
}

// Initialize dashboard
async function initializeDashboard() {
    showLoading();
    
    try {
        const dashboardData = await fetchDashboardData();
        
        updateKPIs(dashboardData);
        updateApplicationsSummary(dashboardData.chartData);
        updateCharts(dashboardData.chartData);
        
        console.log('Dashboard initialized successfully');
        
    } catch (error) {
        showError('Failed to load dashboard data');
        console.error('Dashboard initialization error:', error);
    } finally {
        hideLoading();
    }
}

// DOM Content Loaded
document.addEventListener('DOMContentLoaded', () => {
    // Initialize dashboard
    initializeDashboard();
    
    // Sidebar functionality
    const sidebar = document.getElementById('sidebar');
    const sidebarToggler = document.getElementById('sidebarToggler');
    const menuToggler = document.getElementById('menuToggler');
    const mobileMenuToggle = document.getElementById('mobileMenuToggle');

    // Desktop sidebar toggle
    if (sidebarToggler) {
        sidebarToggler.addEventListener('click', () => {
            sidebar.classList.toggle('collapsed');
        });
    }

    // Mobile menu toggle
    const mobileTogglers = [menuToggler, mobileMenuToggle].filter(Boolean);
    mobileTogglers.forEach(toggler => {
        toggler.addEventListener('click', () => {
            sidebar.classList.toggle('menu-active');
            const icon = toggler.querySelector('span');
            if (icon) {
                icon.textContent = sidebar.classList.contains('menu-active') ? 'close' : 'menu';
            }
        });
    });

    // Close mobile menu on outside click
    document.addEventListener('click', (e) => {
        if (window.innerWidth <= 1024 && 
            !sidebar.contains(e.target) && 
            !mobileTogglers.some(toggler => toggler && toggler.contains(e.target))) {
            sidebar.classList.remove('menu-active');
            mobileTogglers.forEach(toggler => {
                const icon = toggler && toggler.querySelector('span');
                if (icon) icon.textContent = 'menu';
            });
        }
    });

    // Chart filter buttons
    const filterBtns = document.querySelectorAll('.filter-btn');
    filterBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            filterBtns.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            handleChartFilterClick(this.textContent);
        });
    });

    // Responsive handling
    window.addEventListener("resize", () => {
        if (window.innerWidth >= 1024) {
            sidebar.classList.remove("menu-active");
            mobileTogglers.forEach(toggler => {
                const icon = toggler && toggler.querySelector('span');
                if (icon) icon.textContent = 'menu';
            });
        }
    });
});

// Add loading styles
const loadingStyles = `
    .loading {
        cursor: wait;
    }
    
    .loading .kpi-value,
    .loading .chart-container {
        opacity: 0.6;
        pointer-events: none;
    }
    
    .error-message {
        animation: slideIn 0.3s ease;
    }
    
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
`;

const styleSheet = document.createElement('style');
styleSheet.textContent = loadingStyles;
document.head.appendChild(styleSheet);

// Export for external use
window.dashboardAPI = {
    refresh: initializeDashboard,
    updateCharts: handleChartFilterClick,
    fetchDashboardData
};</script>
</body>
</html>